# -*- coding: utf-8 -*-
"""4CLASSES_TUMOR_PREDICTOR_TESTING.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yDdSVMfEoyi-u9FSsupIB13vdj_R3pPA
"""

from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import os
from tensorflow.keras.models import load_model

model = load_model('4classes_tumor_pred.h5')

test_dir='/content/drive/My Drive/TFG/NEW TUMOR/DATA/archive/Testing'

from tensorflow.keras import layers

# set up the image data generators
batch_size = 32
target_size = (150, 150)

# load the testing data
test_data = tf.keras.preprocessing.image_dataset_from_directory(
    test_dir,
    image_size=target_size,
    batch_size=batch_size,
)

test_loss, test_acc = model.evaluate(test_data)
print('Test accuracy:', test_acc)

class_names = test_data.class_names
print(class_names)

from sklearn.metrics import confusion_matrix, classification_report
import pandas as pd

# Get true labels
y_true = np.concatenate([y for x, y in test_data], axis=0)

# Initialize empty arrays for true and predicted labels
y_true = []
y_pred = []

# Iterate over test data and make predictions
for images, labels in test_data:
    preds = model.predict(images)
    y_pred = np.concatenate([y_pred, np.argmax(preds, axis=1)])
    y_true = np.concatenate([y_true, labels])

# Generate confusion matrix
cm = confusion_matrix(y_true, y_pred)

# Generate classification report
cr = classification_report(y_true, y_pred, target_names=test_data.class_names, digits=4)

# Display confusion matrix and classification report
print("Confusion Matrix:\n", cm)
print("Classification Report:\n", cr)

# Create a DataFrame to display the confusion matrix with class names
cm_df = pd.DataFrame(cm, columns=test_data.class_names, index=test_data.class_names)
print("Confusion Matrix with Class Names:\n", cm_df)

cm_df

import pandas as pd
from sklearn.metrics import classification_report

# assume you have already computed y_true and y_pred
class_names = test_data.class_names

# compute classification report
cr = classification_report(y_true, y_pred, target_names=class_names, digits=4, output_dict=True)

# convert to dataframe
df = pd.DataFrame.from_dict(cr).transpose()

# display the dataframe
df

#predictions

#predicting the model
import os
import random
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import cv2

model = tf.keras.models.load_model('4classes_tumor_pred.h5')

folder_path = '/content/drive/My Drive/TFG/prediction 4classes2'
images = os.listdir(folder_path)
n_images = len(images)
selected_images = random.sample(images, 20)

class_labels = ['glioma','meningioma', 'no tumor', 'pituitary']

fig, axs = plt.subplots(nrows=4, ncols=5, figsize=(15, 10))
axs = axs.ravel()

for i in range(20):
    img = Image.open(os.path.join(folder_path, selected_images[i]))
    img = cv2.resize(np.array(img), (150, 150))
    img = cv2.cvtColor(img, cv2.COLOR_RGBA2RGB)
    img = np.expand_dims(img, axis=0)

    prediction = model.predict(img)
    predicted_class_index = np.argmax(prediction)
    predicted_class = class_labels[predicted_class_index]

    axs[i].imshow(cv2.cvtColor(cv2.imread(os.path.join(folder_path, selected_images[i])), cv2.COLOR_BGR2RGB))
    axs[i].set_title(predicted_class, color='red' if predicted_class != 'no tumor' else 'green')
    axs[i].axis('off')
    axs[i].text(0, -15, selected_images[i], fontsize=8)

plt.tight_layout()
plt.show()

import numpy as np
from PIL import Image
import cv2

image_path = 'i3.jpg'

class_labels = ['glioma','meningioma', 'no tumor', 'pituitary']

# Load and preprocess the image
img = Image.open(image_path)
img = cv2.resize(np.array(img), (150, 150))
img = cv2.cvtColor(img, cv2.COLOR_RGBA2RGB)
img = np.expand_dims(img, axis=0)
img = img / 255.0  # Normalize the image pixel values

# Make prediction
prediction = model.predict(img)
predicted_class_index = np.argmax(prediction)
predicted_class = class_labels[predicted_class_index]

# Display the prediction
print("Predicted Class:", predicted_class)

